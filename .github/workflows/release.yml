name: Release
run-name: "Release ${{ github.event.release.tag_name }}"

on:
  release:
    types: [ published ]

env:
  BUILD_TYPE: Release

jobs:
  release-webos:
    name: Release (webOS)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Source
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Download ares-cli-rs
        uses: robinraju/release-downloader@v1.9
        with:
          repository: "webosbrew/ares-cli-rs"
          latest: true
          fileName: "ares-package_*.deb"
          out-file-path: "temp"

      - name: Download Manifest Generator
        uses: robinraju/release-downloader@v1.9
        with:
          repository: "webosbrew/dev-toolbox-cli"
          latest: true
          fileName: "webosbrew-toolbox-gen-manifest_*.deb"
          out-file-path: "temp"

      - name: Update Packages
        run: sudo apt-get -yq update

      - name: Install webOS CLI
        run: sudo apt-get install ./temp/*.deb

      - name: webOS Build
        uses: ./.github/actions/build-webos
        with:
          build-type: RelWithDebInfo

      - name: Create Release (webOS)
        id: create_release_webos
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.event.release.tag_name }}
          allowUpdates: true
          omitNameDuringUpdate: true
          omitBody: true
          omitPrereleaseDuringUpdate: true
          artifacts: dist/*.ipk,dist/*_dbgsym.tar.gz,dist/*.manifest.json

  release-raspi:
    name: Release (Raspberry Pi ${{ matrix.arch }})
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        arch: [ armhf, arm64 ]

    steps:
      - name: Checkout Source
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Update Packages
        shell: bash
        run: sudo apt-get -yq update

      - name: Prepare Sysroot
        id: pi-sysroot
        uses: mariotaku/raspbian-sysroot-action@v1.3
        with:
          release: bullseye
          packages: ${{github.workspace}}/scripts/raspi/sysroot-packages.list
          arch: ${{ matrix.arch }}

      - name: Install Build Tools
        shell: bash
        run: sudo apt-get -y -qq install crossbuild-essential-${{ matrix.arch }} cmake gettext

      - name: Create Build Environment
        run: cmake -E make_directory ${{github.workspace}}/build

      - name: Configure CMake
        shell: bash
        working-directory: ${{github.workspace}}/build
        run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DTARGET_RASPI=ON
          -DCMAKE_TOOLCHAIN_FILE=${{steps.pi-sysroot.outputs.cmake-toolchain}}

      - name: Build
        working-directory: ${{github.workspace}}/build
        shell: bash
        run: cmake --build . --config $BUILD_TYPE

      - name: Create Release (Raspberry Pi)
        id: create_release_raspi
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.event.release.tag_name }}
          allowUpdates: true
          omitNameDuringUpdate: true
          omitBody: true
          omitPrereleaseDuringUpdate: true
          artifacts: build/*.deb

  release-steamlink:
    name: Release (Steam Link)
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout Source
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Steam Link SDK
        uses: ./.github/actions/steamlink-sdk
        with:
          path: .steamlink-sdk

      - name: Install Build Tools
        shell: bash
        run: sudo apt-get -y -qq install cmake gettext

      - name: Create Build Environment
        run: cmake -E make_directory ${{github.workspace}}/build

      - name: Configure CMake
        shell: bash
        working-directory: ${{github.workspace}}/build
        run: |
          source ${{github.workspace}}/.steamlink-sdk/setenv.sh
          cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE
        env:
          CMAKE_TOOLCHAIN_FILE: ${{github.workspace}}/.steamlink-sdk/toolchain/steamlink-toolchain.cmake

      - name: Build
        working-directory: ${{github.workspace}}/build
        shell: bash
        run: |
          source ${{github.workspace}}/.steamlink-sdk/setenv.sh
          cmake --build . --config $BUILD_TYPE
          cpack

      - name: Create Release (Steam Link)
        id: create_release_steamlink
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.event.release.tag_name }}
          allowUpdates: true
          omitNameDuringUpdate: true
          omitBody: true
          omitPrereleaseDuringUpdate: true
          artifacts: dist/moonlight-tv_*_steamlink.*
